name: Build and Commit Cython Extensions

on:
  push:
    paths:
      - 'retopoflow/cy/*.pyx'
      - 'retopoflow/cy/*.pxd'
      - 'cy_setup.py'
      - '.github/workflows/build_cython.yml'
    branches:
      - v3-performance # Or specific branches where commits should happen
  pull_request:
    paths:
      - 'retopoflow/cy/*.pyx'
      - 'retopoflow/cy/*.pxd'
      - 'cy_setup.py'
  workflow_dispatch:  # Allows manual triggering

jobs:
  build:
    name: Build B${{ matrix.blender-version }} on ${{ matrix.os }} (${{ matrix.target || 'default' }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        blender-version: ['4.3', '4.4']
        python-version: ['3.11'] # Assuming 3.11 for both
        include:
          # Blender 4.3 Dependencies
          - blender-version: '4.3'
            numpy-version: '1.24.4'
            cython-version: '3.0.11'
            output-suffix: '43'
          # Blender 4.4 Dependencies
          - blender-version: '4.4'
            numpy-version: '1.26.4'
            cython-version: '3.0.11'
            output-suffix: '44'

          # macOS specific targets
          - os: macos-latest
            target: native # For arm64 build
            compile_target: arm64
          - os: macos-latest
            target: intel # For x86_64 build
            compile_target: x86_64

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Set up MSVC (Visual Studio 2022)
      if: matrix.os == 'windows-latest'
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: x64

    - name: Debug build environment info
      shell: bash
      run: |
        echo "Python Version: $(python --version)"
        echo "Platform: $(python -c 'import platform; print(platform.platform())')"
        echo "Machine: $(python -c 'import platform; print(platform.machine())')"
        echo "OS Env PLAT_NAME: ${{ env.PLAT_NAME || 'N/A' }}"
        echo "Compile Target: ${{ matrix.compile_target || 'N/A' }}"
        echo "Blender Version: ${{ matrix.blender-version }}"
        echo "Numpy Version: ${{ matrix.numpy-version }}"
        echo "Cython Version: ${{ matrix.cython-version }}"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install numpy==${{ matrix.numpy-version }} cython==${{ matrix.cython-version }} setuptools wheel

    # --- Build Commands --- Use cy_setup.py directly
    - name: Build Cython extensions (Windows)
      if: matrix.os == 'windows-latest'
      shell: cmd
      run: |
        echo "Building B${{ matrix.blender-version }} for Windows..."
        python cy_setup.py build_ext --inplace --force --blender-version ${{ matrix.blender-version }}
        if %errorlevel% neq 0 exit /b %errorlevel%

    - name: Build Cython extensions (macOS)
      if: matrix.os == 'macos-latest'
      shell: bash
      env:
        TARGET_ARCH: ${{ matrix.compile_target }}
        ARCHFLAGS: "-arch ${{ matrix.compile_target }}"
      run: |
        echo "Building B${{ matrix.blender-version }} for macOS with arch: $TARGET_ARCH..."
        python cy_setup.py build_ext --inplace --force --blender-version ${{ matrix.blender-version }}

    - name: Build Cython extensions (Linux)
      if: matrix.os == 'ubuntu-latest'
      shell: bash
      run: |
        echo "Building B${{ matrix.blender-version }} for Linux..."
        python cy_setup.py build_ext --inplace --force --blender-version ${{ matrix.blender-version }}

    - name: List compiled files in output dir
      shell: bash
      run: |
        echo "Checking for compiled files in retopoflow/compiled/b${{ matrix.output-suffix }} ..."
        ls -lR retopoflow/compiled/b${{ matrix.output-suffix }} || echo "Directory not found or empty."
        echo "Searching for .so/.pyd files..."
        find retopoflow/compiled/b${{ matrix.output-suffix }} -type f \( -name "*.so" -o -name "*.pyd" \) -print
        if ! find retopoflow/compiled/b${{ matrix.output-suffix }} -type f \( -name "*.so" -o -name "*.pyd" \) | grep -q .; then
          echo "Warning: No compiled extensions found in expected output directory!"
        fi

    - name: Upload compiled version directory
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: compiled-b${{ matrix.output-suffix }}-${{ matrix.os }}-${{ matrix.target || 'default' }}
        path: retopoflow/compiled/b${{ matrix.output-suffix }}
        if-no-files-found: warn
        retention-days: 7

  commit-compiled-files:
    needs: build
    runs-on: ubuntu-latest
    # Only run this job on pushes to the specified branch
    if: github.event_name == 'push' && github.ref == 'refs/heads/v3-performance'
    steps:
    - name: Checkout repository code
      uses: actions/checkout@v4
      with:
        # Need fetch-depth 0 for git push
        fetch-depth: 0

    - name: Download all compiled artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts # Download all artifacts into 'artifacts/' directory

    - name: List downloaded artifacts
      run: ls -lR artifacts

    - name: Merge compiled artifacts into retopoflow/compiled
      shell: bash
      run: |
        set -e # Exit immediately if a command exits with a non-zero status.

        echo "Creating final retopoflow/compiled directory..."
        # Remove existing compiled dir first to ensure clean state, handle case where it doesn't exist
        rm -rf retopoflow/compiled || true
        mkdir -p retopoflow/compiled

        echo "Merging artifact contents directly into retopoflow/compiled/bXX/ ..."

        # Iterate through each downloaded artifact directory (e.g., artifacts/compiled-b43-...)
        find artifacts -mindepth 1 -maxdepth 1 -type d -name 'compiled-b*' -print0 | while IFS= read -r -d $'\0' artifact_dir; do
            artifact_name=$(basename "$artifact_dir")
            echo "============================================"
            echo " Processing artifact dir: $artifact_name"

            # Extract the bXX version (e.g., b43, b44) from the artifact directory name
            if [[ "$artifact_name" =~ compiled-(b[0-9]+)- ]]; then
                version_dir_name="${BASH_REMATCH[1]}" # Extracts 'b43' or 'b44'
                echo "  Detected version: $version_dir_name"
            else
                echo "  Warning: Could not determine bXX version from artifact name '$artifact_name'. Skipping."
                echo "============================================"
                continue
            fi

            # Define the source directory (the root of the artifact)
            source_dir="$artifact_dir"
            # Construct the target directory path in the workspace
            target_compiled_dir="retopoflow/compiled/$version_dir_name"

            echo "  Source dir (artifact root): $source_dir"
            echo "  Target dir: $target_compiled_dir"

            # Ensure the target version directory exists within retopoflow/compiled
            mkdir -p "$target_compiled_dir"

            # List contents of the artifact directory before copy
            echo "  Source contents in $source_dir:"
            ls -lA "$source_dir" || echo "  Warning: Could not list source directory $source_dir"

            # Copy the *contents* of the artifact directory into the target bXX directory
            # Use 'cp -a SOURCE/. TARGET/' pattern to merge contents
            echo "  Executing copy command: cp -a '$source_dir/.' '$target_compiled_dir/'"
            cp -a "$source_dir/." "$target_compiled_dir/" || echo "  ERROR: Copy command failed for '$source_dir'"
            echo "  Copy finished for $source_dir."
            echo "============================================"

        done
        echo "Finished merging loop."

    - name: Verify final compiled structure
      run: |
        echo "Final compiled directory structure after merge:"
        ls -lR retopoflow/compiled || echo "Warning: retopoflow/compiled directory not found or empty after merge attempt."
        echo "Checking for expected binaries:"
        find retopoflow/compiled -type f \\( -name "*.so" -o -name "*.pyd" \\) -print || echo "Warning: No .so or .pyd files found."

    - name: Configure Git and .gitattributes
      run: |
        git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"

    - name: Commit and push changes
      run: |
        echo "Staging compiled files..."
        git add retopoflow/compiled

        echo "Checking for staged changes..."
        # Check if there are changes to commit
        if git diff --staged --quiet; then
          echo "No changes detected in compiled files or .gitattributes to commit."
        else
          echo "Changes detected. Committing..."
          git commit -m "Update compiled Cython extensions [skip ci]"
          echo "Pushing changes..."
          git push
        fi